{{template "layout.gohtml" .}}
{{define "title"}}Battle viewer{{end}}
{{define "head"}}{{end}}
{{define "content"}}
  <script type="module">
      import {css} from '@emotion/css';
      import {render} from 'preact';
      import {html} from 'htm/preact';
      import {useEffect, useRef, useState} from 'preact/hooks';

      const gameData = JSON.parse({{.Output}});
      console.log(gameData);
      const turns = gameData.turns;
      const initUnits = gameData.init_units;
      const CELL_SIZE = 32;
      const GRID_SIZE = 20;

      const getOffset = (pos, off) => (pos + off) * CELL_SIZE

      const gridStyle = css`
        width: ${getOffset(GRID_SIZE, 2)}px;
        height: ${getOffset(GRID_SIZE, 2)}px;`;

      const typeSymbol = {
          warrior: '‚öîÔ∏è',
          mage: 'üîÆ',
          healer: 'üíö',
          rogue: 'üó°Ô∏è'
      };
      const teamColor = {
          1: "bg-blue-500",
          2: "bg-red-500",
      }
      const unitTeam = {
          1: "TeamA",
          2: "TeamB",
      };

      // Create action name mapping from unit_action_map
      const createActionMap = () => {
          const actionMap = {};

          if (gameData.unit_action_map) {
              // Process each unit type in the action map
              Object.entries(gameData.unit_action_map).forEach(([unitType, actions]) => {
                  actionMap[unitType] = {};

                  // Map each action to its name
                  Object.entries(actions).forEach(([actionKey, actionDetails]) => {
                      actionMap[unitType][actionKey] = actionDetails.name || actionKey;
                  });
              });
          }

          return actionMap;
      };

      const actionMap = createActionMap();

      const UnitIcon = ({unit}) => {
          return html`
              <div class=${`w-8 h-8 ${teamColor[unit.team]} rounded-full flex items-center justify-center text-white`}>
                  ${typeSymbol[unit.type]}
              </div>
          `;
      };

      const ActionMarker = ({action, unit}) => {
          if (!action.target || action.action === "hold" || action.action === "move") return null;

          const color = "bg-grey-300";
          const symbol = action.action.includes('attack') ? '‚öîÔ∏è' :
              action.action.includes('skill') ? '‚ú®' : '‚ö°';
          const markerStyle = css`
          left: ${getOffset(action.target.x, 1)}px;
          top: ${getOffset(action.target.y, 1)}px;`;

          return html`
              <div class="absolute z-10 opacity-90 ${markerStyle}">
                  <div class=${`w-4 h-4 ${color} rounded-full flex items-center justify-center text-white`}>
                      ${symbol}
                  </div>
                  <div class=${`w-4 h-4 ${teamColor[unit.team]} rounded-full flex items-center justify-center text-white`}>
                      ${typeSymbol[unit.type]}
                  </div>
              </div>
          `;
      };

      const GridCoordinates = () => html`
          ${Array.from({length: GRID_SIZE}).map((_, i) => html`
              <div key=${`numbers-${i}`}>
                  <div class=${`absolute bg-gray-800 text-white flex items-center justify-center w-8 h-8
                  ${css` left: ${getOffset(i, 1)}px; top: 0; `}`}>
                      ${i}
                  </div>
                  <div class=${`absolute bg-gray-800 text-white flex items-center justify-center w-8 h-8
                   ${css` left: 0; top: ${getOffset(i, 1)}px; `}`}>
                      ${i}
                  </div>
              </div>
          `)}
      `;

      const linesLength = (GRID_SIZE + 1) * CELL_SIZE;
      const GridLines = () => html`
          <div class="absolute" style=${gridStyle}>
              ${Array.from({length: GRID_SIZE + 1}).map((_, i) => html`
                  <div key=${`grid-${i}`}>
                      <div class=${`absolute border-t border-gray-300
                              ${css` left: 0; top: ${getOffset(i, 1)}px; width: ${linesLength}px; `}`}></div>
                      <div class=${`absolute border-l border-gray-300
                              ${css` left: ${getOffset(i, 1)}px; top: 0; height: ${linesLength}px; `}`}></div>
                  </div>
              `)}
          </div>
      `;
      const BattleGrid = ({currentActionIndex}) => {
          // Track units and their positions
          let units = [];

          // Create a map of unit IDs to the most recent unit state
          const unitMap = new Map();

          // First, initialize with all initial units
          if (initUnits && initUnits.length > 0) {
              initUnits.forEach(unit => {
                  unitMap.set(unit.id, unit);
              });
          }

          // Process all turns up to the current action index to get final unit positions
          for (let i = 0; i <= currentActionIndex && i < turns.length; i++) {
              const turn = turns[i];

              // If units_after is available, update the unit state
              if (turn.units_after) {
                  turn.units_after.forEach(unit => {
                      unitMap.set(unit.id, unit);
                  });
              }
          }

          // Convert the map to an array for rendering
          units = Array.from(unitMap.values());

          // Get the current turn for display
          const currentAction = currentActionIndex < turns.length ? turns[currentActionIndex] : null;

          // Get the current unit ID if available
          const currentUnitId = currentAction ? currentAction.unit_id : null;

          const unitStyle = (unit) => css`
    left: ${getOffset(unit.position.x, 1)}px;
    top: ${getOffset(unit.position.y, 1)}px;`;

          return html`
              <div>
                  <div class="relative">
                      <${GridCoordinates}/>
                      <${GridLines}/>
                      ${currentAction && currentAction.unit_action && html`
                          <${ActionMarker}
                                  action=${currentAction.unit_action}
                                  unit=${unitMap.get(currentAction.unit_id)}/>
                      `}
                      ${units.map((unit) =>
                                      unit.hp > 0 && html`
                                          <div key=${unit.id} class="absolute ${unitStyle(unit)}">
                                              <div class=${unit.id === currentUnitId ? 'ring-4 ring-yellow-500 ring-offset-0 rounded-full' : ''}>
                                                  <${UnitIcon} unit=${unit}/>
                                              </div>
                                          </div>
                                      `
                      )}
                  </div>
              </div>
          `;
      };
      const ActionControls = ({currentActionIndex, setCurrentActionIndex}) => {
          const [isAutoPlaying, setIsAutoPlaying] = useState(false);
          const [playbackSpeed, setPlaybackSpeed] = useState(2); // Default medium speed
          const autoPlayRef = useRef(null);

          // Clear autoplay interval when component unmounts
          useEffect(() => {
              return () => {
                  if (autoPlayRef.current) {
                      clearInterval(autoPlayRef.current);
                  }
              };
          }, []);

          // Update autoplay when status or speed changes
          useEffect(() => {
              if (autoPlayRef.current) {
                  clearInterval(autoPlayRef.current);
                  autoPlayRef.current = null;
              }

              if (isAutoPlaying) {
                  // Set speeds: slow (1000ms), medium (500ms), fast (200ms)
                  const speedValues = [1000, 500, 200];
                  const interval = speedValues[playbackSpeed - 1];

                  autoPlayRef.current = setInterval(() => {
                      setCurrentActionIndex(current => {
                          if (current >= turns.length - 1) {
                              // Stop when we reach the end
                              setIsAutoPlaying(false);
                              return current;
                          }
                          return current + 1;
                      });
                  }, interval);
              }

              return () => {
                  if (autoPlayRef.current) {
                      clearInterval(autoPlayRef.current);
                  }
              };
          }, [isAutoPlaying, playbackSpeed, setCurrentActionIndex]);

          const toggleAutoPlay = () => {
              setIsAutoPlaying(!isAutoPlaying);
          };

          return html`
        <div class="bg-white rounded-lg shadow p-4 mb-4">
            <h2 class="text-lg font-bold mb-2 {{if eq .MyTeam "teamA"}}text-blue-500{{else}}text-red-500{{end}}">My {{.MyTeam}}</h2>
            <h2 class="text-lg font-bold mb-2">
                ${currentActionIndex < turns.length && turns[currentActionIndex].turn ?
              `Turn ${turns[currentActionIndex].turn}` :
              "Initial Setup"}
            </h2>
            <h2 class="text-lg font-bold mb-2">Action ${currentActionIndex + 1} of ${turns.length}</h2>
            <input
                    type="range"
                    min="0"
                    max=${turns.length - 1}
                    value=${currentActionIndex}
                    onChange=${(e) => setCurrentActionIndex(Number(e.target.value))}
                    class="w-full mb-2"
            />
            <div class="flex justify-between mb-2">
                <button
                        onClick=${() => setCurrentActionIndex(a => Math.max(0, a - 1))}
                        class="bg-blue-500 text-white px-4 py-2 rounded disabled:bg-gray-400"
                        disabled=${currentActionIndex === 0 || isAutoPlaying}
                >
                    Previous Action
                </button>
                <button
                        onClick=${toggleAutoPlay}
                        class=${isAutoPlaying ? "bg-red-500 text-white px-4 py-2 rounded" : "bg-green-500 text-white px-4 py-2 rounded"}
                        disabled=${currentActionIndex === turns.length - 1}
                >
                    ${isAutoPlaying ? "Pause" : "Play"}
                </button>
                <button
                        onClick=${() => setCurrentActionIndex(a => Math.min(turns.length - 1, a + 1))}
                        class="bg-blue-500 text-white px-4 py-2 rounded disabled:bg-gray-400"
                        disabled=${currentActionIndex === turns.length - 1 || isAutoPlaying}
                >
                    Next Action
                </button>
            </div>
            <div class="flex justify-center space-x-2">
                <span class="text-sm">Speed:</span>
                <button
                        onClick=${() => setPlaybackSpeed(1)}
                        class=${`px-2 py-1 rounded text-sm ${playbackSpeed === 1 ? "bg-blue-500 text-white" : "bg-gray-200"}`}
                >
                    Slow
                </button>
                <button
                        onClick=${() => setPlaybackSpeed(2)}
                        class=${`px-2 py-1 rounded text-sm ${playbackSpeed === 2 ? "bg-blue-500 text-white" : "bg-gray-200"}`}
                >
                    Medium
                </button>
                <button
                        onClick=${() => setPlaybackSpeed(3)}
                        class=${`px-2 py-1 rounded text-sm ${playbackSpeed === 3 ? "bg-blue-500 text-white" : "bg-gray-200"}`}
                >
                    Fast
                </button>
            </div>
        </div>
    `;
      };
      const ActionLog = ({currentActionIndex}) => {
          // Import useRef and useEffect from preact/hooks
          const logRef = useRef(null);

          // Scroll to current action whenever currentActionIndex changes
          useEffect(() => {
              if (logRef.current) {
                  // Find the currently selected action element
                  const selectedElement = logRef.current.querySelector('.ring-yellow-500');
                  if (selectedElement) {
                      // Calculate the scroll position to center the element
                      const container = logRef.current;
                      const containerHeight = container.clientHeight;
                      const elementTop = selectedElement.offsetTop;
                      const elementHeight = selectedElement.clientHeight;

                      // Set scrollTop to center the element in the container
                      container.scrollTop = elementTop - 1.5 * containerHeight + (elementHeight / 2);
                  }
              }

          }, [currentActionIndex]);

          return html`
              <div class="bg-white rounded-lg shadow p-4 mb-4">
                  <h2 class="text-lg font-bold mb-2">Action Log</h2>
                  <div ref=${logRef} class="h-80 overflow-y-auto w-96">
                      ${turns.map((turn, index) => {
                          if (!turn.unit_action) return null;

                          // Find the unit that performed the action
                          const unit = initUnits.find(u => u.id === turn.unit_id);

                          // Use default background if unit is not found
                          const backGround = unit ?
                                  (unit.team === 1 ? "bg-blue-300" : "bg-red-300") :
                                  "bg-gray-300";

                          const targetUnit = turn.units_after?.find(u =>
                                  u.position.x === turn.unit_action.target?.x &&
                                  u.position.y === turn.unit_action.target?.y
                          );

                          // Get the action name from the action map
                          const actionName = unit && unit.type ?
                                  (actionMap[unit.type]?.[turn.unit_action.action] || turn.unit_action.action) :
                                  turn.unit_action.action;

                          // Ensure team and unit type are displayed even if not directly available
                          let unitInfo = "";
                          if (unit) {
                              unitInfo = `${unitTeam[unit.team] || `Team${unit.team}`} ${unit.type || 'Unknown'}: `;
                          } else {
                              // If unit not found but we have unit_id, try to find team from previous turns
                              const previousTurns = turns.slice(0, index);
                              for (let i = previousTurns.length - 1; i >= 0; i--) {
                                  const prevUnit = previousTurns[i].units_after?.find(u => u.id === turn.unit_id);
                                  if (prevUnit) {
                                      unitInfo = `${unitTeam[prevUnit.team] || `Team${prevUnit.team}`} ${prevUnit.type || 'Unknown'}: `;
                                      break;
                                  }
                              }
                              if (!unitInfo) unitInfo = "Unknown unit: ";
                          }

                          return html`
                              <div key=${index} class="m-2">
                                  <div
                                          class="text-sm p-1 ${backGround} ${index === currentActionIndex ? 'ring-4 ring-yellow-500 ring-offset-0' : ''}">
                                      ${turn.turn ? `Turn ${turn.turn}: ` : ''}
                                      ${unitInfo}
                                      ${actionName}
                                      ${turn.unit_action.target ? ` to (${turn.unit_action.target.y}, ${turn.unit_action.target.x})
                                    ${targetUnit ? ` [${targetUnit.type}]` : ''}
                                ` : ''}
                                      ${turn.errors ? html`<p class="bg-red-500 p-1">
                                          ${turn.errors}</p>` : ''}
                                  </div>
                              </div>
                          `;
                      })}
                  </div>
              </div>
          `;
      }

      const UnitStatus = ({currentActionIndex}) => {
          // Determine the current state of all units at this action index
          const unitMap = new Map();

          // Process all turns up to the current action to get unit states
          for (let i = 0; i <= currentActionIndex && i < turns.length; i++) {
              const turn = turns[i];
              if (turn.units_after) {
                  turn.units_after.forEach(unit => {
                      unitMap.set(unit.id, unit);
                  });
              }
          }

          const units = Array.from(unitMap.values());

          return html`
              <div class="bg-white rounded-lg shadow p-4">
                  <h2 class="text-lg font-bold mb-2">Unit Status</h2>
                  <div class="space-y-1">
                      ${units.map((unit) => html`
                          <div
                                  key=${unit.id}
                                  class=${`text-sm p-1 ${unit.hp <= 0 ? 'text-gray-400' : ''}
                              ${unit?.team === 1 ? "bg-blue-300" : "bg-red-300"}`}
                          >
                              ${unitTeam[unit?.team]} ${unit.type}: ${Math.max(0, unit.hp)}
                                  /${unit.maxHp} HP
                          </div>
                      `)}
                  </div>
              </div>
          `;
      };

      const BattleViewer = () => {
          const [currentActionIndex, setCurrentActionIndex] = useState(0);

          return html`
              <div class="flex justify-center m-4 bg-gray-50">
                  <div class="bg-gray-50 p-4 ${gridStyle}">
                      <${BattleGrid} currentActionIndex=${currentActionIndex}/>
                  </div>
                  <div class="p-4 bg-gray-50">
                      ${turns.length > 0 && html`
                          <${ActionControls}
                                  currentActionIndex=${currentActionIndex}
                                  setCurrentActionIndex=${setCurrentActionIndex}
                          />
                      `}
                      <${ActionLog} currentActionIndex=${currentActionIndex}/>
                  </div>

                  <div class="p-4 bg-gray-50">
                      <${UnitStatus} currentActionIndex=${currentActionIndex}/>
                  </div>
              </div>
          `;
      };

      // Define a LogViewer component
      const LogViewer = () => {
          return html`
              <div class="bg-white rounded-lg shadow p-4 m-4">
                  <div class="h-48 overflow-y-auto font-mono text-sm whitespace-pre" style="width: 1200px">
                      ${ {{.MyTeam}} === 'teamA' ? gameData.team_one_logs : gameData.team_two_logs}
                  </div>
              </div>
          `;
      };

      render(html`
          <div>
              <${BattleViewer}/>
          </div>
      `, document.getElementById("battle"))

  </script>

  <div class="min-h-screen flex justify-center bg-base-200">
    <div id="battle"></div>
  </div>
{{end}}
