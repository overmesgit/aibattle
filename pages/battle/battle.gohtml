{{template "layout.gohtml" .}}
{{define "title"}}Battle viewer{{end}}
{{define "head"}}{{end}}
{{define "content"}}
  <script type="module">
      import {css} from '@emotion/css';
      import {render} from 'preact';
      import {html} from 'htm/preact';
      import {useState} from 'preact/hooks';

      const gameData = JSON.parse({{.Output}});
      const gameTurns = gameData.turns;
      const initUnits = gameData.init_units;
      const CELL_SIZE = 32;
      const GRID_SIZE = 20;

      const getOffset = (pos, off) => (pos + off) * CELL_SIZE

      const gridStyle = css`
        width: ${getOffset(GRID_SIZE, 2)}px;
        height: ${getOffset(GRID_SIZE, 2)}px;`;

      const typeSymbol = {
          warrior: '‚öîÔ∏è',
          mage: 'üîÆ',
          healer: 'üíö',
          rogue: 'üó°Ô∏è'
      };
      const teamColor = {
          1: "bg-blue-500",
          2: "bg-red-500",
      }
      const unitTeam = {
          1: "TeamA",
          2: "TeamB",
      };


      const createSkillMap = (initUnits) => {
          const skillMap = {};

          initUnits.forEach(unit => {
              if (!skillMap[unit.type]) {
                  skillMap[unit.type] = {};

                  // Map all actions from the unit
                  Object.entries(unit.actions).forEach(([actionKey, actionValue]) => {
                      if (actionKey.startsWith("skill")) {
                          const skillKey = actionKey.replaceAll("_", "");
                          skillMap[unit.type][skillKey] = actionValue.name;
                      }
                  });
              }
          });

          return skillMap;
      };
      const skillMap = createSkillMap(initUnits);
      console.log(skillMap)

      const UnitIcon = ({unit}) => {
          return html`
              <div class=${`w-8 h-8 ${teamColor[unit.team]} rounded-full flex items-center justify-center text-white`}>
                  ${typeSymbol[unit.type]}
              </div>
          `;
      };

      const ActionMarker = ({action, unit}) => {
          if (!action.target || action.action === "hold") return null;

          const color = "bg-grey-300";
          const symbol = action.action.includes('attack') ? '‚öîÔ∏è' :
              action.action.includes('skill') ? '‚ú®' : '‚ö°';
          const markerStyle = css`
          left: ${getOffset(action.target.x, 1)}px;
          top: ${getOffset(action.target.y, 1)}px;`;

          return html`
              <div class="absolute z-10 opacity-90 ${markerStyle}">
                  <div class=${`w-4 h-4 ${color} rounded-full flex items-center justify-center text-white`}>
                      ${symbol}
                  </div>
                  <div class=${`w-4 h-4 ${teamColor[unit.team]} rounded-full flex items-center justify-center text-white`}>
                      ${typeSymbol[unit.type]}
                  </div>
              </div>
          `;
      };

      const GridCoordinates = () => html`
          ${Array.from({length: GRID_SIZE}).map((_, i) => html`
              <div key=${`numbers-${i}`}>
                  <div class=${`absolute bg-gray-800 text-white flex items-center justify-center w-8 h-8
                  ${css` left: ${getOffset(i, 1)}px; top: 0; `}`}>
                      ${i}
                  </div>
                  <div class=${`absolute bg-gray-800 text-white flex items-center justify-center w-8 h-8
                   ${css` left: 0; top: ${getOffset(i, 1)}px; `}`}>
                      ${i}
                  </div>
              </div>
          `)}
      `;

      const linesLength = (GRID_SIZE + 1) * CELL_SIZE;
      const GridLines = () => html`
          <div class="absolute" style=${gridStyle}>
              ${Array.from({length: GRID_SIZE + 1}).map((_, i) => html`
                  <div key=${`grid-${i}`}>
                      <div class=${`absolute border-t border-gray-300
                              ${css` left: 0; top: ${getOffset(i, 1)}px; width: ${linesLength}px; `}`}></div>
                      <div class=${`absolute border-l border-gray-300
                              ${css` left: ${getOffset(i, 1)}px; top: 0; height: ${linesLength}px; `}`}></div>
                  </div>
              `)}
          </div>
      `;

      const BattleGrid = ({currentState, currentAction}) => {
          // Create deep copy of units to track positions
          const units = JSON.parse(JSON.stringify(currentState.units || []));
          const idToUnit = new Map(units.map(unit => [unit.id, unit]));

          // Get actions up to current and apply position updates
          const relevantActions = currentState.actions?.slice(0, currentAction + 1) || [];
          relevantActions.forEach(action => {
              action.unit_action.forEach(act => {
                  if (act?.target && act.action.includes('move') && !act.error) {
                      const unit = idToUnit.get(action.unit_id);
                      if (unit) {
                          unit.position.x = act.target.x;
                          unit.position.y = act.target.y;
                      }
                  }
              });
          });
          const unitStyle = (unit) => css`
          left: ${getOffset(unit.position.x, 1)}px;
          top: ${getOffset(unit.position.y, 1)}px;`;


          return html`
              <div>
                  <div class="relative">
                      <${GridCoordinates}/>
                      <${GridLines}/>
                      ${currentState.actions?.map((action, index) =>
                              action.unit_action.map((act, actIndex) =>
                                      act && html`
                                          <${ActionMarker} key=${`action-${index}-${actIndex}`}
                                                           action=${act}
                                                           unit=${idToUnit.get(action.unit_id)}/>`
                              )
                      )}
                      ${units.map((unit) =>
                                      unit.hp > 0 && html`
                                          <div key=${unit.id} class="absolute ${unitStyle(unit)}">
                                              <${UnitIcon} unit=${unit}/>
                                          </div>
                                      `
                      )}
                  </div>
              </div>
          `;
      };

      const Controls = ({currentTurn, gameTurns, setCurrentTurn}) => html`
          <div class="bg-white rounded-lg shadow p-4 mb-4">
              <h2 class="text-lg font-bold mb-2 {{if eq .MyTeam "teamA"}}text-blue-500{{else}}text-red-500{{end}}">My {{.MyTeam}}</h2>
              <h2 class="text-lg font-bold mb-2">Turn ${currentTurn} </h2>
              <input
                      type="range"
                      min="0"
                      max=${gameTurns.length - 1}
                      value=${currentTurn}
                      onChange=${(e) => setCurrentTurn(Number(e.target.value))}
                      class="w-full mb-2"
              />
              <div class="flex justify-between">
                  <button
                          onClick=${() => setCurrentTurn(t => Math.max(0, t - 1))}
                          class="bg-blue-500 text-white px-4 py-2 rounded disabled:bg-gray-400"
                          disabled=${currentTurn === 0}
                  >
                      Previous
                  </button>
                  <button
                          onClick=${() => setCurrentTurn(t => Math.min(gameTurns.length - 1, t + 1))}
                          class="bg-blue-500 text-white px-4 py-2 rounded disabled:bg-gray-400"
                          disabled=${currentTurn === gameTurns.length - 1}
                  >
                      Next
                  </button>
              </div>
          </div>
      `;

      const ActionLog = ({currentState, currentAction}) => {
          let wonTeam = null;
          if (currentState.type?.startsWith("Team")) {
              wonTeam = `${currentState.type} WON!`;
          }
          return html`
              <div class="bg-white rounded-lg shadow p-4 mb-4">
                  <h2 class="text-lg font-bold mb-2">Action Log</h2>
                  <div class="h-82 overflow-y-auto w-96">
                      ${wonTeam}
                      ${currentState.actions?.map((action, index) => html`
                          <div key=${index} class="m-2">
                              ${action.unit_action.map((act, actIndex) => {
                                  if (!act) return null;
                                  const targetUnit = currentState.units?.find(
                                          u => u.position.x === act.target?.x && u.position.y === act.target?.y
                                  );
                                  const unit = currentState.units.find((u) => u.id === action.unit_id);
                                  const backGround = unit?.team === 1 ? "bg-blue-300" : "bg-red-300";
                                  return html`
                                      <div key=${actIndex}
                                           class="text-sm p-1 ${backGround} ${index === currentAction ? 'ring-4 ring-yellow-500 ring-offset-0' : ''}">
                                          <p>
                                              ${unitTeam[unit?.team]} Unit ${unit?.type}:
                                              ${skillMap[unit?.type][act.action] || act.action}
                                              ${act.target ? ` to (${act.target.y}, ${act.target.x})
                                                  ${targetUnit ? ` [${targetUnit.type}]` : ''
                                              }` : ''}
                                          </p>
                                          ${act.error ? html`<p class="bg-red-500 p-1">
                                              ${act.error}</p>` : ''}
                                      </div>
                                  `;
                              })}
                          </div>
                      `)}
                  </div>
              </div>
          `;
      }

      const UnitStatus = ({currentState}) => {
          return html`
              <div class="bg-white rounded-lg shadow p-4">
                  <h2 class="text-lg font-bold mb-2">Unit Status</h2>
                  <div class="space-y-1">
                      ${currentState.units?.map((unit) => html`
                          <div
                                  key=${unit.id}
                                  class=${`text-sm p-1 ${unit.hp <= 0 ? 'text-gray-400' : ''}
                                  ${unit?.team === 1 ? "bg-blue-300" : "bg-red-300"}`}
                          >
                              ${unitTeam[unit?.team]} ${unit.type}: ${Math.max(0, unit.hp)}
                                  /${unit.maxHp} HP
                          </div>
                      `)}
                  </div>
              </div>
          `
      };

      const ActionControls = ({currentAction, totalActions, setCurrentAction}) => html`
          <div class="bg-white rounded-lg shadow p-4 mb-4">
              <h2 class="text-lg font-bold mb-2">Action ${currentAction + 1} of ${totalActions}</h2>
              <input
                      type="range"
                      min="0"
                      max=${Math.max(0, totalActions - 1)}
                      value=${currentAction}
                      onChange=${(e) => setCurrentAction(Number(e.target.value))}
                      class="w-full mb-2"
              />
              <div class="flex justify-between">
                  <button
                          onClick=${() => setCurrentAction(a => Math.max(0, a - 1))}
                          class="bg-blue-500 text-white px-4 py-2 rounded disabled:bg-gray-400"
                          disabled=${currentAction === 0}
                  >
                      Previous Action
                  </button>
                  <button
                          onClick=${() => setCurrentAction(a => Math.min(totalActions - 1, a + 1))}
                          class="bg-blue-500 text-white px-4 py-2 rounded disabled:bg-gray-400"
                          disabled=${currentAction === totalActions - 1}
                  >
                      Next Action
                  </button>
              </div>
          </div>
      `;

      const BattleViewer = () => {
          const [currentTurn, setCurrentTurn] = useState(0);
          const [currentAction, setCurrentAction] = useState(0);

          const currentState = gameTurns[currentTurn] || {units: [], actions: []};
          const totalActions = currentState.actions?.length || 0;

          const handleTurnChange = (newTurn) => {
              setCurrentTurn(newTurn);
              setCurrentAction(0);
          };

          return html`
              <div class="flex justify-center m-4 bg-gray-50">
                  <div class="bg-gray-50 p-4 ${gridStyle}">
                      <${BattleGrid} currentState=${currentState} currentAction=${currentAction}/>
                  </div>
                  <div class="p-4 bg-gray-50">
                      ${gameTurns.length > 0 && html`
                          <${Controls} currentTurn=${currentTurn} gameTurns=${gameTurns}
                                       setCurrentTurn=${handleTurnChange}/>
                              <${ActionControls} currentAction=${currentAction}
                                                 totalActions=${totalActions}
                                                 setCurrentAction=${setCurrentAction}/>
                      `}
                      <${ActionLog} currentState=${currentState} currentAction=${currentAction}/>
                  </div>

                  <div class="p-4 bg-gray-50">
                      <${UnitStatus} currentState=${currentState}/>
                  </div>
              </div>
          `;
      };

      render(html`
          <${BattleViewer}/>`, document.getElementById("battle"))

  </script>

  <div class="min-h-screen flex justify-center bg-base-200">
    <div id="battle"></div>
  </div>
{{end}}
