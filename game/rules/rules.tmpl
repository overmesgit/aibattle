Game Overview:

Turn-based tactical battle between two teams.
Each team has {{.NumUnitsPerTeam}} specialized units.
Movement and combat occur on a {{.GridSize}} grid.
Initiative system determines unit action order.
Victory achieved by eliminating all enemy units.

Game Rules Refinements:
Movement:
- Units can move on the move range distance
- Units can not stand on each other.
- Units can attack or use skill only in specified range for such actions.
- Target of attack or skill action must be an unit.
- Units have different set of possible actions.
- Units with 0 HP will be removed from the current game.

Action Economy:
Each unit gets one movement and one action per turn
Can forfeit movement for an additional action

Units descriptions:
{{.UnitsDescription}}

Each player is represented as a function, that process one unit term per call:
GetTurnActions(input NextTurnInput) ActionResponse
This function accepts one parameter:
 input - byte string encoded json.

Input argument is a game state with UnitID for which program must generate next actions.
<NextTurnInput>
{{.JSONState}}
</NextTurnInput>

Function returns ActionResponse, which is next action for the unit specified in the second parameter as a json byte string.
<ActionResponse>
{{.NextActionExample}}
</ActionResponse>

Follow these guidelines:
- Generate complete, compilable code.
- You must follow language syntax.
- Write an implementation of a team program for this game.
- Output only code and nothing else.
- Only use standard library.
- You can get possible actions from NextTurnInput.

Generate code that will be added inside <template> tag to the PlayTurn function instead of <generated> tag.
You must implement GetTurnActions(input NextTurnInput) ActionResponse function.

<template>
{{.LanguageTemplate}}
</template>

Prompt output template:
<sourcecode>
</sourcecode>
